{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["fn","order","down","originalIndex","curIndex","y","index","scale","zIndex","shadow","immediate","n","indexOf","App","useEffect","console","log","window","addEventListener","event","bodyBg","document","body","style","JSON","stringify","value","alert","backgroundColor","items","split","useRef","map","_","useSprings","length","current","springs","setSprings","bind","useGesture","args","delta","curRow","clamp","Math","round","newOrder","swap","className","class","height","i","div","key","boxShadow","interpolate","s","transform","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kNAAe,I,6CCUTA,EAAK,SAACC,EAAOC,EAAMC,EAAeC,EAAUC,GAAvC,OAA6C,SAACC,GAAD,OACtDJ,GAAQI,IAAUH,EAOd,CACEE,EAAc,IAAXD,EAAiBC,EACpBE,MAAO,IACPC,OAAQ,IACRC,OAAQ,GACRC,UAAW,SAACC,GAAD,MAAa,MAANA,GAAmB,WAANA,IAEjC,CACEN,EAA0B,IAAvBJ,EAAMW,QAAQN,GACjBC,MAAO,EACPC,OAAQ,IACRC,OAAQ,EACRC,WAAW,KAiEJG,MA9Df,WACEC,qBAAU,WACRC,QAAQC,IAAI,oBACZC,OAAOC,iBAAiB,eAAe,SAAUC,GAC/C,IAAIC,EAASC,SAASC,KAAKC,MAC3BR,QAAQC,IAAR,kCAAuCQ,KAAKC,UAAUN,KAGlDA,EAAMO,MAAQ,KAChBC,MAAM,mDAENP,EAAOQ,gBAAkB,aAEzBR,EAAOQ,gBAAkB,aAK/B,IAAMC,EAAQ,mBAAmBC,MAAM,KACjC7B,EAAQ8B,iBAAOF,EAAMG,KAAI,SAACC,EAAG3B,GAAJ,OAAcA,MAnBhC,EAoBiB4B,YAAWL,EAAMM,OAAQnC,EAAGC,EAAMmC,UApBnD,mBAoBNC,EApBM,KAoBGC,EApBH,KAqBPC,EAAOC,aAAW,YAAoD,IAA1CrC,EAAyC,cAAhDsC,KAAgD,MAAzBvC,EAAyB,EAAzBA,KAAgBG,EAAS,cAAnBqC,MAAmB,MACnEtC,EAAWH,EAAMmC,QAAQxB,QAAQT,GACjCwC,EAASC,YACbC,KAAKC,OAAkB,IAAX1C,EAAiBC,GAAK,KAClC,EACAwB,EAAMM,OAAS,GAEXY,EAAWC,IAAK/C,EAAMmC,QAAShC,EAAUuC,GAK/CL,EAAWtC,EAAG+C,EAAU7C,EAAMC,EAAeC,EAAUC,IAElDH,IAAMD,EAAMmC,QAAUW,MAE7B,OACE,qBAAKE,UAAU,MAAf,SACE,qBAAKC,MAAM,UAAU3B,MAAO,CAAE4B,OAAuB,IAAftB,EAAMM,QAA5C,SACGE,EAAQL,KAAI,WAA+BoB,GAA/B,IAAG5C,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQJ,EAAnB,EAAmBA,EAAGE,EAAtB,EAAsBA,MAAtB,OACX,wBAAC,IAAS8C,IAAV,2BACMd,EAAKa,IADX,IAEEE,IAAKF,EACL7B,MAAO,CACLf,SACA+C,UAAW9C,EAAO+C,aAChB,SAACC,GAAD,wCAAkCA,EAAlC,cAAyC,EAAIA,EAA7C,aAEFC,UAAWF,YACT,CAACnD,EAAGE,IACJ,SAACF,EAAGoD,GAAJ,8BAA2BpD,EAA3B,uBAA2CoD,EAA3C,SAGJE,SAAU9B,EAAMuB,cC3EbQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASmD,eAAe,SAM1BZ,M","file":"static/js/main.35171efc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from \"./logo.svg\";\nimport React, { useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport { useGesture } from \"react-with-gesture\";\nimport clamp from \"lodash-es/clamp\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport swap from \"lodash-move\";\n\n// WHEN dragging, this function will be fed with all arguments.\n// OTHERWISE, only the list order is relevant.\nconst fn = (order, down, originalIndex, curIndex, y) => (index) =>\n  down && index === originalIndex\n    ? /*\n      No need to transition the following properties:\n      - z-index, the elevation of the item related to the root of the view; it should pop straight up to 1, from 0.\n      - y, the translated distance from the top; it's already being updated dinamically, smoothly, from react-gesture.\n      Thus immediate returns `true` for both.\n    */\n      {\n        y: curIndex * 100 + y,\n        scale: 1.1,\n        zIndex: \"1\",\n        shadow: 15,\n        immediate: (n) => n === \"y\" || n === \"zIndex\",\n      }\n    : {\n        y: order.indexOf(index) * 100,\n        scale: 1,\n        zIndex: \"0\",\n        shadow: 1,\n        immediate: false,\n      };\n\nfunction App() {\n  useEffect(() => {\n    console.log(\"inside useEffect\");\n    window.addEventListener(\"devicelight\", function (event) {\n      var bodyBg = document.body.style;\n      console.log(`devicelight event value:${JSON.stringify(event)}`);\n\n      //event.value is the lux value returned by the sensor on the device\n      if (event.value < 100) {\n        alert(\"Hey, you! You are working in a dark environment\");\n\n        bodyBg.backgroundColor = \"lightgrey\";\n      } else {\n        bodyBg.backgroundColor = \"#fff\";\n      }\n    });\n  });\n\n  const items = \"testing the list\".split(\" \");\n  const order = useRef(items.map((_, index) => index));\n  const [springs, setSprings] = useSprings(items.length, fn(order.current));\n  const bind = useGesture(({ args: [originalIndex], down, delta: [, y] }) => {\n    const curIndex = order.current.indexOf(originalIndex);\n    const curRow = clamp(\n      Math.round((curIndex * 100 + y) / 100),\n      0,\n      items.length - 1\n    );\n    const newOrder = swap(order.current, curIndex, curRow);\n    /*\n      Curry all variables needed for the truthy clause of the ternary expression from fn,\n      so that new objects are fed to the springs without triggering a re-render.\n    */\n    setSprings(fn(newOrder, down, originalIndex, curIndex, y));\n    // Settles the new order on the end of the drag gesture (when down is false)\n    if (!down) order.current = newOrder;\n  });\n  return (\n    <div className=\"App\">\n      <div class=\"content\" style={{ height: items.length * 100 }}>\n        {springs.map(({ zIndex, shadow, y, scale }, i) => (\n          <animated.div\n            {...bind(i)}\n            key={i}\n            style={{\n              zIndex,\n              boxShadow: shadow.interpolate(\n                (s) => `rgba(0, 0, 0, 0.15) 0px ${s}px ${2 * s}px 0px`\n              ),\n              transform: interpolate(\n                [y, scale],\n                (y, s) => `translate3d(0,${y}px,0) scale(${s})`\n              ),\n            }}\n            children={items[i]}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}